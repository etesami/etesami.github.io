<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://etesami.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://etesami.github.io/" rel="alternate" type="text/html" /><updated>2021-01-04T12:56:59-05:00</updated><id>https://etesami.github.io/feed.xml</id><title type="html">Ehsan Etesami</title><subtitle>Ehsan Etesami is a PhD student at the Electrical and Computer Engineering department of the University of Toronto, Canada.</subtitle><entry><title type="html">Install Ubuntu 20.04 via PXE UEFI Setup</title><link href="https://etesami.github.io/2021/01/03/install-ubuntu-20-04-uefi-pxe.html" rel="alternate" type="text/html" title="Install Ubuntu 20.04 via PXE UEFI Setup" /><published>2021-01-03T00:00:00-05:00</published><updated>2021-01-03T00:00:00-05:00</updated><id>https://etesami.github.io/2021/01/03/install-ubuntu-20-04-uefi-pxe</id><content type="html" xml:base="https://etesami.github.io/2021/01/03/install-ubuntu-20-04-uefi-pxe.html">&lt;p&gt;By following this tutorial, you will boot up Ubuntu 20.04 via an image hosted in another machine in your local network. For this purpose, you need to install and configure a DHCP, TFTP and Apache servers. In this tutorial, we will install all services on one machine.&lt;/p&gt;
&lt;div class=&quot;alert alert-info&quot; role=&quot;alert&quot;&gt;
This tutorial is mostly based on &lt;a target=&quot;_blank&quot; href=&quot;https://youtu.be/U3RC20ANomk&quot;&gt;this video&lt;/a&gt;. However, there are a few changes to use Ubuntu 20.04 instead.
&lt;/div&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;h4&gt;Installing Packages&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tftpd-hpa isc-dhcp-server syslinux-efi syslinux-common apache2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4&gt;Configuring TFTP server and Copying Required Files&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; /tftpboot

&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; /usr/lib/syslinux/modules/efi64/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ldlinux.e64,libutil.c32,menu.c32&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; /tftpboot
&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; /usr/lib/SYSLINUX.EFI/efi64/syslinux.efi /tftpboot 

&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; /tftpboot/pxelinux.cfg
&lt;span class=&quot;nb&quot;&gt;sudo touch&lt;/span&gt; /tftpboot/pxelinux.cfg/default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim /etc/default/tftpd-hpa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now make sure TFTP configuration file looks like below (&lt;code class=&quot;highlighter-rouge&quot;&gt;TFTP_DIRECTORY&lt;/code&gt; should be the &lt;code class=&quot;highlighter-rouge&quot;&gt;/tftpboot&lt;/code&gt; directory you created before):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /etc/default/tftpd-hpa&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;TFTP_USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tftp&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TFTP_DIRECTORY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/tftpboot&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TFTP_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:69&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TFTP_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--secure&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Also make sure the UDP port 69 is accessible through your local network, then:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart tftpd-hpa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4&gt;Configuring DHCP Server&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim /etc/dhcp/dhcpd.conf 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Specify the subnet for the allocation of initial IPs to the machines:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Specify the nameservers&lt;/span&gt;
option domain-name-servers 8.8.8.8, 8.8.4.4&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Uncomment this line if you are using your local network&lt;/span&gt;
authoritative&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Configure your subnet&lt;/span&gt;
subnet 10.10.30.0 netmask 255.255.255.0 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    range 10.10.30.200 10.10.30.240&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    option routers 10.10.30.10&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    filename &lt;span class=&quot;s2&quot;&gt;&quot;pxelinux.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    next-server x.x.x.x&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    option bootfile-name &lt;span class=&quot;s2&quot;&gt;&quot;syslinux.efi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Replace the IP address of the TFTP server with &lt;code class=&quot;highlighter-rouge&quot;&gt;x.x.x.x&lt;/code&gt;. Since we will bring up all these servers in one machine, this should be the IP address of the current machine.&lt;/p&gt;

&lt;p&gt;Now find your MAC address of the interface that the DHCP server should listen to (instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;eno2&lt;/code&gt;, use your interface name):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig eno2 | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;ether
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Open the file below and enter the MAC address in &lt;code class=&quot;highlighter-rouge&quot;&gt;INTERFACESv4&lt;/code&gt; field.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim /etc/default/isc-dhcp-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And finally:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart isc-dhcp-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4&gt;Configuring Apache Server&lt;/h4&gt;
&lt;p&gt;Download the latest version of Ubuntu 20.04 and then:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mount &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; ro ubuntu-20.04-live-server-amd64.iso /mnt
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /mnt/casper/initrd /tftpboot
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /mnt/casper/vmlinuz /tftpboot

&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/www/html/ubuntu2004
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;ubuntu-20.04-live-server-amd64.iso /var/www/html/ubuntu2004
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now edit the file &lt;code class=&quot;highlighter-rouge&quot;&gt;/tftpboot/pxelinux.cfg/default&lt;/code&gt; as below to point to the address of the Ubuntu ISO:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim /tftpboot/pxelinux.cfg/default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DEFAULT &lt;span class=&quot;nb&quot;&gt;install
 &lt;/span&gt;LABEL &lt;span class=&quot;nb&quot;&gt;install
 &lt;/span&gt;KERNEL vmlinuz
 INITRD initrd
 APPEND &lt;span class=&quot;nv&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/ram0 &lt;span class=&quot;nv&quot;&gt;ramdisk_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1500000 &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dhcp &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://&amp;lt;IP-ADDR&amp;gt;/ubuntu2004/ubuntu-20.04.1-live-server-amd64.iso
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;IP-ADDR&lt;/code&gt; simply provide the IP address of the current machine, generally this should be address of the Apache server which hosts the Ubuntu ISO.&lt;/p&gt;

&lt;h4&gt;Testing&lt;/h4&gt;
&lt;p&gt;Turn on another machine in your local network and try boot up using PXE network.&lt;/p&gt;</content><author><name></name></author><category term="Ubuntu" /><category term="Networking" /><category term="Linux" /><summary type="html">By following this tutorial, you will boot up Ubuntu 20.04 via an image hosted in another machine in your local network. For this purpose, you need to install and configure a DHCP, TFTP and Apache servers. In this tutorial, we will install all services on one machine. This tutorial is mostly based on this video. However, there are a few changes to use Ubuntu 20.04 instead.</summary></entry><entry><title type="html">Migrate a Single WordPress site to Multisite WordPress System Using WP CLI</title><link href="https://etesami.github.io/2020/02/18/migrate-single-to-multisite-wordpress-site.html" rel="alternate" type="text/html" title="Migrate a Single WordPress site to Multisite WordPress System Using WP CLI" /><published>2020-02-18T00:00:00-05:00</published><updated>2020-02-18T00:00:00-05:00</updated><id>https://etesami.github.io/2020/02/18/migrate-single-to-multisite-wordpress-site</id><content type="html" xml:base="https://etesami.github.io/2020/02/18/migrate-single-to-multisite-wordpress-site.html">&lt;p&gt;Transferring a single WordPress site to a multisite WordPress system can become complicated, especially if you have a large website with many contents and plugins. Here we will see how we can manually transfer a single site using the &lt;a href=&quot;https://wp-cli.org&quot;&gt;WP command-line interface&lt;/a&gt;. In this document, we assume you have access to the servers hosting your websites and have created a &lt;a href=&quot;https://wordpress.org/support/article/create-a-network/&quot;&gt;multisite WordPress network&lt;/a&gt;, and you are ready to transfer your site.&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;h4&gt;Backup Eveything&lt;/h4&gt;
&lt;p&gt;Backup your files and your database:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wp db &lt;span class=&quot;nt&quot;&gt;--dbuser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;db_username&amp;gt; &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;db.sql
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; /var/www &lt;span class=&quot;nt&quot;&gt;-zcvf&lt;/span&gt; files.tar.gz wordpress &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;Copy Files to New Multisite Folder&lt;/h4&gt;
&lt;p&gt;When you create a new site in multisite WordPress, a corresponding folder for that is created. Assume the WordPress picks up the id &lt;strong&gt;8&lt;/strong&gt; for this site; thus its contents are stored in:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/path/to/multisite-root/wp-content/uploads/sites/8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Copy all uploaded contents to the new location:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rp&lt;/span&gt; /path/to/singlesite-root/wp-content/uploads/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                     /path/to/multisite-root/wp-content/uploads/sites/8/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;Find and Install Plugins&lt;/h4&gt;
&lt;p&gt;Before you proceed, you have to install and activate all used plugins and themes in the multisite WordPress. To get the list of installed plugins in the single-site WordPress:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wp plugin list
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wp theme list
&lt;span class=&quot;c&quot;&gt;# On the mutisite WordPress:&lt;/span&gt;
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wp plugin &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &amp;lt;name-of-plugin&amp;gt; &lt;span class=&quot;nt&quot;&gt;--activate-network&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;Export wp-options Table and Contents&lt;/h4&gt;
&lt;p&gt;Plugins settings and configuration you have made are all stored in the &lt;strong&gt;wp-options&lt;/strong&gt; table. In a multisite environment, each site has its own set of tables. They are distinguished by getting a unique prefix. For instance, &lt;em&gt;wp-options&lt;/em&gt; for our target site is became &lt;strong&gt;wp-8-options&lt;/strong&gt;. We first export this table from single-site WordPress:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# To export wp-options table from database&lt;/span&gt;
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wp db &lt;span class=&quot;nt&quot;&gt;--dbuser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root &lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;wp_options ~/wordpress_options.sql 
&lt;span class=&quot;c&quot;&gt;# To export all posts, pages, menus and etc. into a XML file:&lt;/span&gt;
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wp &lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;Perform Modifications&lt;/h4&gt;
&lt;p&gt;Now we have two files which we have to perform some filtering on them. In particular, we need to change the &lt;strong&gt;path to the contents&lt;/strong&gt; and the &lt;strong&gt;site URL&lt;/strong&gt; and &lt;strong&gt;home URL&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/wp_/wp_8_/g'&lt;/span&gt; ~/wordpress_options.sql &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Open the &lt;code class=&quot;highlighter-rouge&quot;&gt;~/wordpress_options.sql&lt;/code&gt; and change the &lt;strong&gt;site URL&lt;/strong&gt; and &lt;strong&gt;home URL&lt;/strong&gt; to multisite URL in the first line of &lt;strong&gt;INSERT TO&lt;/strong&gt; statement.&lt;/p&gt;

&lt;p&gt;Once you finish that, it is time to change some paths on the XML file which contains the contents of your site:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/&amp;lt;old-url&amp;gt;/&amp;lt;new-url&amp;gt;/g'&lt;/span&gt; &amp;lt;xml-file&amp;gt;
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/http:\/wp-content/http:\/\/&amp;lt;new-url&amp;gt;\/wp-content/g'&lt;/span&gt; &amp;lt;xml-file&amp;gt;
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/wp-content\/uploads/wp-content\/uploads\/sites\/8/g'&lt;/span&gt; &amp;lt;xml-file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By now, we are almost done. We need to import the &lt;code class=&quot;highlighter-rouge&quot;&gt;~/wordpress_options.sql&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;xml-file&amp;gt;&lt;/code&gt; into the database.&lt;/p&gt;

&lt;h4&gt;Import into Database&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wp db &lt;span class=&quot;nt&quot;&gt;--dbuser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root import ~/wordpress_options.sql 
&lt;span class=&quot;c&quot;&gt;# On the multisite WordPress perform:&lt;/span&gt;
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wp import &lt;span class=&quot;nt&quot;&gt;--authors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;usermaps.csv &lt;span class=&quot;nt&quot;&gt;--url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;site-url&amp;gt; &amp;lt;xml-file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check the output of the above commands for any failure during the import procedure. If you get some error, look for the corresponding attachments in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;xml-file&amp;gt;&lt;/code&gt;. You probably need to correct the paths of a few items. The file &lt;code class=&quot;highlighter-rouge&quot;&gt;usermaps.csv&lt;/code&gt; provides a mapping from contents’ authors and the current existing users in the multisite WordPress. It looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;usermaps.csv
old_user_login,new_user_login
old-username1,new-username1
old-username2,new-username2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;Final Step: Search and Replace&lt;/h4&gt;
&lt;p&gt;Often times, you will see some images or links which still are using the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;old-url&amp;gt;‍‍‍‍‍‍‍&lt;/code&gt;. To check the whole database for any occurances:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wp search-replace &lt;span class=&quot;s1&quot;&gt;'&amp;lt;old-url&amp;gt;'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;new-url&amp;gt;'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;new-url&amp;gt; &lt;span class=&quot;nt&quot;&gt;--precise&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Although this is a useful tool, however, you can also dump the whole database and replace whatever is needed as well.&lt;/p&gt;</content><author><name></name></author><category term="WordPress" /><summary type="html">Transferring a single WordPress site to a multisite WordPress system can become complicated, especially if you have a large website with many contents and plugins. Here we will see how we can manually transfer a single site using the WP command-line interface. In this document, we assume you have access to the servers hosting your websites and have created a multisite WordPress network, and you are ready to transfer your site.</summary></entry><entry><title type="html">Access to the SAVI using Web Portal</title><link href="https://etesami.github.io/2020/02/07/SAVI-tutorial-web-interface-UofT.html" rel="alternate" type="text/html" title="Access to the SAVI using Web Portal" /><published>2020-02-07T00:00:00-05:00</published><updated>2020-02-07T00:00:00-05:00</updated><id>https://etesami.github.io/2020/02/07/SAVI-tutorial-web-interface-UofT</id><content type="html" xml:base="https://etesami.github.io/2020/02/07/SAVI-tutorial-web-interface-UofT.html">&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;
  For more information on SAVI project please check their &lt;a href=&quot;https://www.savinetwork.ca&quot; target=&quot;_blank&quot;&gt;official page&lt;/a&gt;.
&lt;/div&gt;
&lt;p&gt;We assume that you have already got access to use SAVI and the focus of this tutorial is to show how to create your virtual machine using the web interface. Please note that access to the SAVI using terminal (client1) is more stable and robust.&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;h4&gt;Log in and Overview Page&lt;/h4&gt;
&lt;p&gt;Log in to the SAVI using the &lt;a href=&quot;http://n-portal.savitestbed.ca&quot;&gt;portal&lt;/a&gt; by your credentials. Once you log in to the portal, you can change the &lt;strong&gt;region&lt;/strong&gt; and the &lt;strong&gt;project&lt;/strong&gt; you have access to. Currently, the best region to use is &lt;strong&gt;CORE&lt;/strong&gt; and &lt;strong&gt;CORE-2&lt;/strong&gt;. Some regions may not be available temporarily. If you encounter any errors when you log in, please change the region.&lt;/p&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/savi/savi-user-interface-portal-tutorial-01.png&quot; /&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;h4&gt;Create a New Instance (VM)&lt;/h4&gt;
&lt;p&gt;Click on the instance menu. You will see other instances which are for other people working on the same &lt;em&gt;project&lt;/em&gt;. Click on the &lt;strong&gt;Launch Instance&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;
  This is highly important that you not alter, modify or remove others' instances.
&lt;/div&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/savi/savi-user-interface-portal-tutorial-02.png&quot; /&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;h5&gt;Instance Information&lt;/h5&gt;
&lt;p&gt;Enter a name and continue to the next step.&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/savi/savi-user-interface-portal-tutorial-03.png&quot; /&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5&gt;Source Image&lt;/h5&gt;
&lt;p&gt;In the &lt;strong&gt;Source&lt;/strong&gt; menu, make sure you have selected &lt;strong&gt;image&lt;/strong&gt; as the boot source and &lt;strong&gt;not create a new volume&lt;/strong&gt;. Then select the appropriate image from the list.&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/savi/savi-user-interface-portal-tutorial-04.png&quot; /&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;h5&gt;VM Flavor&lt;/h5&gt;
&lt;p&gt;A flavour determines the amount of resources given to your VM. Select the right flavour based on your needs and available capacity of the project. You can see the current status of the used resources in the  &lt;strong&gt;Overview&lt;/strong&gt; page.&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/savi/savi-user-interface-portal-tutorial-05.png&quot; /&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;h5&gt;VM Security Groups&lt;/h5&gt;
&lt;p&gt;By default, there is limited access to your VM from outside (i.e. Internet). You have to create a security group that reflects the appropriate access (which port and protocol are open). You may select &lt;strong&gt;default&lt;/strong&gt; security groups but if you need specific ports to be opened, you have to create your security group.&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/savi/savi-user-interface-portal-tutorial-06.png&quot; /&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;h5&gt;VM Key Pair&lt;/h5&gt;
&lt;p&gt;Access to VMs using username and passwords is blocked when you first create a VM. You can change this later within the VM’s configuration. To enable access to it for the first time, you have to provide a public SSH key. If you do not have one already, you can create one at this page.&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/savi/savi-user-interface-portal-tutorial-07.png&quot; /&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now click on &lt;strong&gt;Launch Instance&lt;/strong&gt; and your VM should boot and may take time for some seconds or minutes based on the image you have selected. Once your VM is booted, you can click on it and then using the tab &lt;strong&gt;console&lt;/strong&gt; access to the VM. Please note it is always preferred to use the &lt;em&gt;client1&lt;/em&gt; machine as the gateway.&lt;/p&gt;</content><author><name></name></author><category term="SAVI" /><category term="Linux" /><summary type="html">For more information on SAVI project please check their official page. We assume that you have already got access to use SAVI and the focus of this tutorial is to show how to create your virtual machine using the web interface. Please note that access to the SAVI using terminal (client1) is more stable and robust.</summary></entry><entry><title type="html">Run PyCharm IDE over SSH using Remote Host Interpreter</title><link href="https://etesami.github.io/2020/01/27/run-pycharm-over-ssh-remotely.html" rel="alternate" type="text/html" title="Run PyCharm IDE over SSH using Remote Host Interpreter" /><published>2020-01-27T00:00:00-05:00</published><updated>2020-01-27T00:00:00-05:00</updated><id>https://etesami.github.io/2020/01/27/run-pycharm-over-ssh-remotely</id><content type="html" xml:base="https://etesami.github.io/2020/01/27/run-pycharm-over-ssh-remotely.html">&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;
  1. This tutorial is intended for &lt;b&gt;UofT ECE361&lt;/b&gt;, however, it is general enough for any other interested readers.&lt;br /&gt;
  2. The purpose of this tutorial is to provide help to those who have problems with &lt;b&gt;VM's screen size&lt;/b&gt; or the &lt;b&gt;installed IDE&lt;/b&gt; and want to have a &lt;b&gt;full IDE&lt;/b&gt; to work with.&lt;br /&gt;
  3. This workaround is completely &lt;b&gt;optional&lt;/b&gt; and does not affect your ability to do the labs, however, it might make it &lt;b&gt;easier&lt;/b&gt;.&lt;br /&gt;
  4. Thanks to &lt;a target=&quot;_blank&quot; href=&quot;https://www.sarhad.me&quot;&gt;Sarhad Salam&lt;/a&gt;, he has created a similar &lt;a target=&quot;_blank&quot; href=&quot;http://bit.ly/2Gyo6xC&quot;&gt;guide&lt;/a&gt; to setup SSH login for a VM which uses vscode.

&lt;/div&gt;

&lt;div class=&quot;row justify-content-between&quot;&gt;
	&lt;div class=&quot;col col-sm-8 mt-4 col-11&quot;&gt;
      Assume you have installed a VM on the VirtualBox. We first see how we can access the VM terminal within the host machine. Then we will see how to run our python code using PyCharm IDE, which is installed on the host while codes and the interpreter are all located on the VM. 
 &lt;/div&gt;
 &lt;div class=&quot;col col-sm-4 col-11 my-4 img&quot;&gt;
   &lt;center&gt;&lt;img style=&quot;width: 80%;&quot; alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/SSH-VM-over-NAT-PyCharm-SSH-interpreter.png&quot; /&gt;&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;h4&gt;VM Network Configuration&lt;/h4&gt;
&lt;p&gt;There are possible configurations for the VM within VirtualBox, namely “Bridge” and “NAT” mode. &lt;strong&gt;NAT&lt;/strong&gt; is the simplest way of accessing an external network from a virtual machine. We set the network adaptor mode to &lt;strong&gt;NAT&lt;/strong&gt; and configure &lt;strong&gt;Port Forwarding&lt;/strong&gt; in order to get access to the VM from the &lt;strong&gt;host&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/vm-nat-virtualbox-ssh-01.png&quot; /&gt;
   &lt;center&gt;Fig 1: Select the VM and click on Setting&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Go to the &lt;strong&gt;Network&lt;/strong&gt; and then select &lt;strong&gt;NAT&lt;/strong&gt; in &lt;em&gt;“Attached to”&lt;/em&gt; and click on &lt;strong&gt;Port Forwarding&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/vm-nat-virtualbox-ssh-02.png&quot; /&gt;
   &lt;center&gt;Fig 2: VM Network Configuration&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the following step we forward all queries sent to the port &lt;strong&gt;2229&lt;/strong&gt; of the &lt;strong&gt;Host&lt;/strong&gt; to the port &lt;strong&gt;22&lt;/strong&gt; of the &lt;strong&gt;VM&lt;/strong&gt; which is the default port for SSH. The port number 2229 can be any arbitrary available port in the host. Add a new entry and enter the number &lt;strong&gt;2229&lt;/strong&gt; for &lt;strong&gt;Host Port&lt;/strong&gt; and number &lt;strong&gt;22&lt;/strong&gt; for the &lt;strong&gt;Guest Port&lt;/strong&gt;. Leave everything else and click on Ok.&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/vm-nat-virtualbox-ssh-03.png&quot; /&gt;
   &lt;center&gt;Fig 3: VM Network NAT Configuration&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then start the VM and you are done with VM’s network configuration!&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/vm-nat-virtualbox-ssh-04.png&quot; /&gt;
   &lt;center&gt;Fig 4: Running the VM&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;h4&gt;Connect to the VM from the Host (your computer)&lt;/h4&gt;
&lt;p&gt;Now you are able to open your terminal and connect to the VM from your machine (host). Thus, minimize the VM &lt;em&gt;(you do not have to work with the VM’s actual window anymore!)&lt;/em&gt; and continue using SSH.&lt;/p&gt;

&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;
   If you work with Microsoft Windows you have to use &lt;a target=&quot;_blank&quot; href=&quot;https://www.putty.org&quot;&gt;putty&lt;/a&gt; and then connect to your VM. Look at &lt;a target=&quot;_blank&quot; href=&quot;http://bit.ly/2U4lzTL&quot;&gt;this instruction&lt;/a&gt; to see how you can get started with putty. Please note if you have followed the above instructions then the hostname is &lt;b&gt;localhost&lt;/b&gt;, the port is &lt;b&gt;2229&lt;/b&gt; and the &lt;b&gt;username&lt;/b&gt; and &lt;b&gt;password&lt;/b&gt; are the same as your VM.
&lt;/div&gt;

&lt;p&gt;Now open a new terminal &lt;em&gt;(either your Linux/MacOS terminal or putty)&lt;/em&gt; and connect to the VM:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# In MacOS/Linux terminal you can enter:&lt;/span&gt;
ssh ubuntu@localhost &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 2229&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/vm-nat-virtualbox-ssh-05.png&quot; /&gt;
   &lt;center&gt;Fig 5: Log in to the VM within the Host terminal&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/vm-nat-virtualbox-ssh-06.png&quot; /&gt;
   &lt;center&gt;Fig 6: You've loged in to the VM!&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then it prompts for the password, after entering the password you will log into the VM. Now you can open as many terminals as you need and as long as you have made an SSH connection (like fig. 5) then you can think of each of them as a VM terminal. Every command you enter is executed in the VM.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4&gt;Using PyCharm over SSH Connection&lt;/h4&gt;
&lt;p&gt;Now we are looking for an IDE that lets us work on files on the remote server and execute them! Thus, download and install &lt;strong&gt;&lt;a href=&quot;https://www.jetbrains.com/pycharm/download/&quot;&gt;PyCharm Professional Edition&lt;/a&gt;&lt;/strong&gt;. If you install community edition, it does not provide you with the feature we are looking for. You can use your university mail to activate the license.&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-7 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-01.png&quot; /&gt;
   &lt;center&gt;Fig 7: Download the Professional Edition&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-7 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-02.png&quot; /&gt;
   &lt;center&gt;Fig 8: Run the PyCharm&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After installation lunch the IDE and select &lt;strong&gt;Create new project&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-03.png&quot; /&gt;
   &lt;center&gt;Fig 9: Select &quot;Create new project&quot;&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Enter a new name for the project and move forward according to the image below:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-04.png&quot; /&gt;
   &lt;center&gt;Fig 10: Configure the Interpreter&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;According to the image below, enter &lt;strong&gt;localhost&lt;/strong&gt; and &lt;strong&gt;ubuntu&lt;/strong&gt; for the &lt;em&gt;Host&lt;/em&gt; and &lt;em&gt;Username&lt;/em&gt; fields, respectively. Enter the port number &lt;strong&gt;2229&lt;/strong&gt; in the &lt;em&gt;port number&lt;/em&gt; field. Then press next.&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-05.png&quot; /&gt;
   &lt;center&gt;Fig 11: Configure the interpreter&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the next step you give the path where the python binary is located. This can be the default python path in your system (you can get that using &lt;code class=&quot;highlighter-rouge&quot;&gt;whereis python&lt;/code&gt;). &lt;strong&gt;However&lt;/strong&gt;, we have to use the binaries provided within the lab. Similar to when you are using command &lt;code class=&quot;highlighter-rouge&quot;&gt;source /home/ubuntu/lab1/sourceMe&lt;/code&gt;. Therefore, enter the path according to the figure below and press finish:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;/home/ubuntu/lab1/.venv/bin/python3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-08.png&quot; /&gt;
   &lt;center&gt;Fig 12: Path for python binary&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;
   Please note that the path for python virtual environment is not fixed for all labs. As you can see we entered the path which is within &lt;b&gt;lab1&lt;/b&gt; directory. You may be given a completely different virtual environment for each lab and you have to create a new project and reconfigure the above step.
&lt;/div&gt;

&lt;p&gt;In the next step, make sure you have selected the &lt;strong&gt;Remote interpreter&lt;/strong&gt; like what you see in the picture below:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-09.png&quot; /&gt;
   &lt;center&gt;Fig 13: Select the newly added remote interpreter&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now you have created a project using VM’s python interpreter. Let’s copy files from the VM into the host in order to start editing them. Go to &lt;strong&gt;tools&lt;/strong&gt;, &lt;strong&gt;Deployment&lt;/strong&gt; and then &lt;strong&gt;Browse Remote Host&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-12 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-10.png&quot; /&gt;
   &lt;center&gt;Fig 14: Enable browsing remote host&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the newly opened window, look for &lt;strong&gt;home&lt;/strong&gt;, then &lt;strong&gt;ubuntu&lt;/strong&gt; and &lt;strong&gt;lab1&lt;/strong&gt;. Open the lab1 folder and select both folders &lt;strong&gt;track1&lt;/strong&gt; and &lt;strong&gt;track2&lt;/strong&gt; by pressing &lt;strong&gt;ctrl&lt;/strong&gt; button. Then press &lt;strong&gt;right-click&lt;/strong&gt; and select &lt;strong&gt;copy&lt;/strong&gt; according to the image below:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-8 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-11.png&quot; /&gt;
   &lt;center&gt;Fig 15: Copy folders from remote server (VM) to your machine (host)&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Go to the &lt;strong&gt;Project&lt;/strong&gt; windows in the left side of IDE and past folders inside your &lt;strong&gt;project folder&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-8 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-12.png&quot; /&gt;
   &lt;center&gt;Fig 16: Past folders from VM to your host&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So now you have lab files from the VM. Before starting to open and work on them, let’s sync your host with the VM so that the changes you are going to make are being synced with the files in the VM. Thus, click on &lt;strong&gt;folder project&lt;/strong&gt;, go to the &lt;strong&gt;Deployment&lt;/strong&gt; and select &lt;strong&gt;upload to ubuntu@localhost:2229&lt;/strong&gt;, like the image below:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-12 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-13.png&quot; /&gt;
   &lt;center&gt;Fig 17: Upload and sync files with the VM&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now you are ready to open files, edit and execute them. So let’s open folder &lt;code class=&quot;highlighter-rouge&quot;&gt;track1/module4&lt;/code&gt; and then &lt;code class=&quot;highlighter-rouge&quot;&gt;receiver.py&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sender.py&lt;/code&gt;. Then &lt;em&gt;run&lt;/em&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;receiver.py&lt;/code&gt; and then do the same for the &lt;code class=&quot;highlighter-rouge&quot;&gt;sender.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-12 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-14.png&quot; /&gt;
   &lt;center&gt;Fig 18: Open the files, edit and run them&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now you get results of the execution of each file on the bottom window and it’s like when you are running on two separate terminals inside the VM.&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-12 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-15.png&quot; /&gt;
   &lt;center&gt;Fig 19: Reciver.py is ruuning and you can see its status on the terminal&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Congratulations! You have successfully edited and executed your files on the remote VM!&lt;/p&gt;</content><author><name></name></author><category term="Linux" /><category term="Networking" /><summary type="html">1. This tutorial is intended for UofT ECE361, however, it is general enough for any other interested readers. 2. The purpose of this tutorial is to provide help to those who have problems with VM's screen size or the installed IDE and want to have a full IDE to work with. 3. This workaround is completely optional and does not affect your ability to do the labs, however, it might make it easier. 4. Thanks to Sarhad Salam, he has created a similar guide to setup SSH login for a VM which uses vscode.</summary></entry><entry><title type="html">Reverse SSH to Access Hosts Behind the NAT</title><link href="https://etesami.github.io/2020/01/17/reverse-ssh-linux.html" rel="alternate" type="text/html" title="Reverse SSH to Access Hosts Behind the NAT" /><published>2020-01-17T00:00:00-05:00</published><updated>2020-01-17T00:00:00-05:00</updated><id>https://etesami.github.io/2020/01/17/reverse-ssh-linux</id><content type="html" xml:base="https://etesami.github.io/2020/01/17/reverse-ssh-linux.html">&lt;p&gt;Assume you have a local machine behind NAT and there is a relay machine that has a public IP address. You want to have access to the local computer from anywhere.&lt;/p&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-7 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;VMs Overlay Network Sample&quot; src=&quot;/assets/images/ssh-reverse-nat.png&quot; /&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;h4&gt;Create SSH from Local to the Relay Machine&lt;/h4&gt;
&lt;p&gt;Log into the relay machine and then pick any arbitrary available port up. Here we use port &lt;strong&gt;10022&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# -f send to the background&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -N means there is no command to execute&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    over an established ssh connection&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -R is used for port forwarding. Any request sent to the &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    port 10022 of the relay machine will be forwarded to &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    the port 22 of the local machine.&lt;/span&gt;

ssh &lt;span class=&quot;nt&quot;&gt;-fN&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 10022:localhost:22 &amp;lt;relay-username&amp;gt;@&amp;lt;relay-ip&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then from anywhere on the Internet, first ssh to the relay computer and then within the terminal of relay machine ssh to the local machine:&lt;/p&gt;

&lt;h4&gt;Connect to the Local Machine from the Relay Machine&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ssh &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 10022 &amp;lt;local-username&amp;gt;@localhost&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="Networking" /><category term="Linux" /><summary type="html">Assume you have a local machine behind NAT and there is a relay machine that has a public IP address. You want to have access to the local computer from anywhere.</summary></entry><entry><title type="html">VNC Server in Ubuntu 16.04, 18.04 and CentOS 7</title><link href="https://etesami.github.io/2020/01/10/vnc-ubuntu-centos.html" rel="alternate" type="text/html" title="VNC Server in Ubuntu 16.04, 18.04 and CentOS 7" /><published>2020-01-10T00:00:00-05:00</published><updated>2020-01-10T00:00:00-05:00</updated><id>https://etesami.github.io/2020/01/10/vnc-ubuntu-centos</id><content type="html" xml:base="https://etesami.github.io/2020/01/10/vnc-ubuntu-centos.html">&lt;p&gt;If you work with a server hosted in the cloud environment, most of the time, you may find it very useful to have graphical access to the server. Here, we will install &lt;strong&gt;TightVNC&lt;/strong&gt; on the Ubuntu 16.04 and CentOS 7 and &lt;strong&gt;VNC4Server&lt;/strong&gt; on Ubuntu 18.04 and then connect to it. In order to access the operating system graphically, a graphical environment should be installed on the OS. The most used ones are LXDE (fig 1), Mate (fig 2), Xfce (fig 3), KDE (fig 4) and Gnome (fig 5). Running each one requires different hardware specifications.&lt;/p&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 
 &lt;div class=&quot;col col-sm-6 col-11 my-4 img&quot;&gt;
   &lt;img alt=&quot;LXDE Plasma Environment&quot; src=&quot;/assets/images/LXDE_desktop_full.png&quot; /&gt;
   &lt;span&gt;Fig 1: LXDE Plasma Environment&lt;/span&gt;
 &lt;/div&gt;
 &lt;div class=&quot;col col-sm-6 col-11 my-4 img&quot;&gt;
   &lt;img alt=&quot;XFCE Environment&quot; src=&quot;/assets/images/ubuntu-mate.png&quot; /&gt;
   &lt;span&gt;Fig 2: Mate Environment&lt;/span&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-4 col-11 my-4 img&quot;&gt;
   &lt;img alt=&quot;XFCE Environment&quot; src=&quot;/assets/images/XFCE-Desktop-standard.png&quot; /&gt;
   &lt;span&gt;Fig 3: XFCE Environment&lt;/span&gt;
 &lt;/div&gt;
 &lt;div class=&quot;col col-md-4 col-11 my-4 img&quot;&gt;
   &lt;img alt=&quot;KDE Plasma Environment&quot; src=&quot;/assets/images/KDE_Plasma_Desktop.png&quot; /&gt;
   &lt;span&gt;Fig 4: KDE Plasma Environment&lt;/span&gt;
 &lt;/div&gt;
 
 &lt;div class=&quot;col col-md-4 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;Gnome Environment&quot; src=&quot;/assets/images/GNOME.png&quot; /&gt;
   &lt;span&gt;Fig 5: Gnome Environment&lt;/span&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;If the operating system has a graphical environment you may skip the &lt;strong&gt;Install Graphical Environment&lt;/strong&gt; section. Let’s start with CentOS 7:&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;CentOS 7&lt;/h3&gt;
&lt;h4&gt;Install Graphical Environment&lt;/h4&gt;

&lt;p&gt;To install Gnome on CentOS 7:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum groupinstall &lt;span class=&quot;s2&quot;&gt;&quot;GNOME Desktop&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;TightVNC Server Installation and Configuration&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tightvnc.com&quot;&gt;TightVNC server&lt;/a&gt; is a popular VNC server. Install it on the CentOS by:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tigervnc-server xorg-x11-fonts-Type1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;VNC Server Configuration&lt;/h5&gt;
&lt;p&gt;The next step is to create a config file for VNC server. In CentOS, we can copy the default config file and modify it to reflects the appropriate configuration.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The number &lt;strong&gt;1&lt;/strong&gt; in &lt;strong&gt;vncserver@:1.service&lt;/strong&gt; shows the display port in VNC server. The VNC server uses ports ranging from 5901 to 5909. Copy the bellow configuration to the newly created file and replace the &lt;strong&gt;centos&lt;/strong&gt; with your username.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Remote desktop service &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;VNC&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;syslog.target network.target

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;forking
&lt;span class=&quot;nv&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/usr/bin/vncserver -kill %i &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 || :'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/sbin/runuser &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; centos &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/usr/bin/vncserver %i&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/usr/bin/vncserver -kill %i &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 || :'&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We realized a line like this “PIDFile=/home/&lt;USER&gt;/.vnc/%H%i.pid&quot; in the configuration file may cause problem in starting the service. So we have removed it. Then, reload the configuration and enable the service to start on boot:&lt;/USER&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;systemctl daemon-reload
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;vncserver@:1.service&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;Running the VNC Service&lt;/h5&gt;
&lt;p&gt;Now run the VNC server. If this is the first time then you have to provide the password for VNC server. This password will be used when you connect to the VNC sever.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;vncserver&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After running VNC server, kill the session that the previous command just created and run the service:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;vncserver &lt;span class=&quot;nt&quot;&gt;-kill&lt;/span&gt; :1
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start vncserver@:1.service&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h3&gt;Ubuntu 16.04 and 18.04&lt;/h3&gt;
&lt;h4&gt;Install Graphical Environment&lt;/h4&gt;

&lt;p&gt;I prefer to install the graphical environment using a tool called &lt;strong&gt;tasksel&lt;/strong&gt;. It used to install a collection of tools:&lt;/p&gt;

&lt;p&gt;To install Ubuntu Mate:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tasksel
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tasksel&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When you run the tool, you will see a user interface which let you install collections of tools, including a couple of graphical environment for Ubuntu. In this dialog let’s select &lt;strong&gt;Ubuntu Mate minimal installation&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-8 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;VMs Overlay Network Sample&quot; src=&quot;/assets/images/ubuntu-tasksel.png&quot; /&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;h4&gt;VNC Server Installation and Configuration Ubuntu 16.04&lt;/h4&gt;
&lt;p&gt;Install &lt;strong&gt;TightVNC&lt;/strong&gt; server on the Ubuntu by:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tightvncserver&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;VNC Server Configuration&lt;/h5&gt;
&lt;p&gt;In Ubuntu we have to create a file named as &lt;strong&gt;vncserver@.service&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim /etc/systemd/system/vncserver@.service&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Put the content bellow into the file. Do not forget to replace every &lt;strong&gt;ubuntu&lt;/strong&gt; word with your account username on the machine:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Start TightVNC server at startup
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;syslog.target network.target

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;forking
&lt;span class=&quot;nv&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ubuntu
&lt;span class=&quot;nv&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ubuntu
&lt;span class=&quot;nv&quot;&gt;WorkingDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/ubuntu

&lt;span class=&quot;nv&quot;&gt;PIDFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/ubuntu/.vnc/%H:%i.pid                                                                                          
&lt;span class=&quot;nv&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-/usr/bin/vncserver &lt;span class=&quot;nt&quot;&gt;-kill&lt;/span&gt; :%i &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/bin/vncserver :%i
&lt;span class=&quot;nv&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/bin/vncserver &lt;span class=&quot;nt&quot;&gt;-kill&lt;/span&gt; :%i

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl daemon-reload
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;vncserver@1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;Running the VNC Service&lt;/h5&gt;
&lt;p&gt;Now we need to run the VNC server and If this is the first time then you have to provide the password for VNC server:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;vncserver&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After running VNC server, kill the session that the previous command just created and run the service:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;vncserver &lt;span class=&quot;nt&quot;&gt;-kill&lt;/span&gt; :1
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start vncserver@1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;VNC Server Installation and Configuration Ubuntu 18.04&lt;/h4&gt;
&lt;p&gt;Install &lt;strong&gt;VNC4Server&lt;/strong&gt; on the Ubuntu by:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;vnc4serverer &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;VNC Server Configuration&lt;/h5&gt;
&lt;p&gt;Configuration of vnc4server is quite easy. Run the vncserver for the first time to set the password:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;vncserver&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is just enough to have the file &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vnc/xstartup&lt;/code&gt; with following configuration and no change is neccessary:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh                                                                                                                                               &lt;/span&gt;
xrdb &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.Xresources
xsetroot &lt;span class=&quot;nt&quot;&gt;-solid&lt;/span&gt; grey
&lt;span class=&quot;c&quot;&gt;#x-terminal-emulator -geometry 80x24+10+10 -ls -title &quot;$VNCDESKTOP Desktop&quot; &amp;amp;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#x-window-manager &amp;amp;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Fix to make GNOME work&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;XKL_XMODMAP_DISABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
/etc/X11/Xsession&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5&gt;Running the VNC Service&lt;/h5&gt;
&lt;p&gt;Now we run the VNC server:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;vncserver&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After running VNC server, kill the session that the previous command just created and run the service:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;vncserver &lt;span class=&quot;nt&quot;&gt;-kill&lt;/span&gt; :1
&lt;span class=&quot;nv&quot;&gt;SCREEN_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1440x900
vncserver &lt;span class=&quot;nt&quot;&gt;-geometry&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SCREEN_SIZE&lt;/span&gt; :1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h4&gt;Access to the Remote Machine using VNC Client&lt;/h4&gt;
&lt;p&gt;There are a couple of VNC viewer client avaialbe. Download one of them and connect to server:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;vnc://IP_address:5901&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h4&gt;Troubleshooting&lt;/h4&gt;
&lt;p&gt;When you try to install a graphical environment and start the VNC server, it is pretty common to encounter errors and gray screen. Here is a list of resources which may be useful:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/42296329/&quot;&gt;The gray screen in VNC viewer when using Gnome in Ubuntu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.howopensource.com/2011/08/vnc-error-unable-to-connect-to-host-no-route-to-host-113-solved/&quot;&gt;“Unable to connect to host: No route to host” Allow traffic to pass through Iptables in CentOS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://askubuntu.com/questions/943750&quot;&gt;Differrent graphical environments for Linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linuxtechi.com/install-configure-vnc-server-centos-7-rhel-7/&quot;&gt;A Good article to install VNC server from begging to the end on CentOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Linux" /><summary type="html">If you work with a server hosted in the cloud environment, most of the time, you may find it very useful to have graphical access to the server. Here, we will install TightVNC on the Ubuntu 16.04 and CentOS 7 and VNC4Server on Ubuntu 18.04 and then connect to it. In order to access the operating system graphically, a graphical environment should be installed on the OS. The most used ones are LXDE (fig 1), Mate (fig 2), Xfce (fig 3), KDE (fig 4) and Gnome (fig 5). Running each one requires different hardware specifications.</summary></entry><entry><title type="html">Create an Overlay Network in Ubuntu using Open vSwitch (OVS)</title><link href="https://etesami.github.io/2019/10/14/overlay-networks-in-ubuntu.html" rel="alternate" type="text/html" title="Create an Overlay Network in Ubuntu using Open vSwitch (OVS)" /><published>2019-10-14T00:00:00-04:00</published><updated>2019-10-14T00:00:00-04:00</updated><id>https://etesami.github.io/2019/10/14/overlay-networks-in-ubuntu</id><content type="html" xml:base="https://etesami.github.io/2019/10/14/overlay-networks-in-ubuntu.html">&lt;p&gt;By creating an overlay network, you can have a new interface attached to your system with any arbitrary IP that you would like. You can also join other machines to this network and have connectivity between all of them using the overlay IPs.
OVS is a multilayer virtual switch designed to enable massive network automation through programmatic extension. To create an overlay network, we need to create an &lt;strong&gt;internal interface&lt;/strong&gt;. The internal interface is used because you may lose your connectivity when trying to build a bridge and connect your physical interfaces to it; since they would not get an IP (switches work in &lt;strong&gt;layer 2&lt;/strong&gt;). Instead, the internal interface obtains an IP address, and the host would be accessible. Here, we create an overlay network between three VMs running on Virtual Box.&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;h4&gt;Install Open vSwitch&lt;/h4&gt;
&lt;p&gt;To install Open vSwitch please check &lt;a href=&quot;http://docs.openvswitch.org/en/latest/&quot;&gt;their page&lt;/a&gt;. Alternatively, you can install ovs using apt-get in ubuntu by:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;openvswitch-switch openvswitch-common&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In an overlay network created by Openvswitch, all packets are encapsulated in UDP packets associated with the port 4789. So please ensure this port is accessible.&lt;/p&gt;

&lt;h4&gt;Create a bridge and interfaces&lt;/h4&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-7 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;VMs Overlay Network Sample&quot; src=&quot;/assets/images/vms-overlay-network-sample.png&quot; /&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here, we create a bridge named &lt;strong&gt;br-mng&lt;/strong&gt;. An internal interface named &lt;strong&gt;intif&lt;/strong&gt; and an interface of type &lt;strong&gt;vxlan&lt;/strong&gt; are also created. Vxlan interface is used for point to point communication between two hosts. So the same key should be used for both hosts on each side of the connection. It should be noted that the MTU of the internal interface (intif) should be set to &lt;strong&gt;1450&lt;/strong&gt;. Since packets are encapsulated in UDP packets and the size of the payload is matter. There is a nice explanation &lt;a href=&quot;https://www.sidorenko.io/post/2018/11/openstack-networking-open-vswitch-and-vxlan-introduction&quot;&gt;here&lt;/a&gt;. Then we have:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-br br-mng
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-port br-mng intif &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interface intif &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;internal
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-port br-mng vxlan1 &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interface vxlan1 &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vxlan &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                   options:remote_ip&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10.0.0.12 options:key&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1025
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ifconfig intif 192.168.10.11/24 mtu 1450 up&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And in VM #2 we have the same things. However, the underlay and overlay IP are changed correspondingly, but the key remains the same.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-br br-mng
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-port br-mng intif &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interface intif &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;internal
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-port br-mng vxlan1 &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interface vxlan1 &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vxlan &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                   options:remote_ip&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10.0.0.11 options:key&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1025
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ifconfig intif 192.168.10.12/24 mtu 1450 up&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;Test the Connectivity&lt;/h4&gt;
&lt;p&gt;To ensure having proper connectivity, let’s see the status of interfaces of your VMs. We should have the &lt;strong&gt;overlay IP&lt;/strong&gt; that we chose before and &lt;strong&gt;MTU of 1450&lt;/strong&gt; for &lt;strong&gt;intif&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ifconfig
eth0: &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
  inet 10.0.0.11 netmask 255.255.255.0  broadcast 10.0.0.255
  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
intif: &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1450
  inet 192.168.10.11 netmask 255.255.255.0  broadcast 192.168.10.255
  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
  .&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also use &lt;a href=&quot;https://iperf.fr&quot;&gt;iperf3&lt;/a&gt; which is a tool for active measurements of the maximum achievable bandwidth. 
On VM #1 with overlay IP of 192.168.10.11 execute:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;iperf3 &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and on the VM #2 with overlay IP of 192.168.10.12:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;iperf3 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 192.168.10.11&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then you should see the following output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM2:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;iperf3 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 192.168.10.11
Connecting to host 192.168.10.11, port 5201
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4] &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;192.168.10.12 port 33092 connected to 192.168.10.11 port 5201
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ID] Interval           Transfer     Bandwidth       Retr  Cwnd
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   0.00-1.00   sec   102 MBytes   858 Mbits/sec    0   2.09 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   1.00-2.00   sec   118 MBytes   992 Mbits/sec    0   2.33 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   2.00-3.00   sec   121 MBytes  1.01 Gbits/sec    0   2.78 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   3.00-4.00   sec   119 MBytes   996 Mbits/sec  166   1.97 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   4.00-5.00   sec   114 MBytes   957 Mbits/sec    0   1.97 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   5.00-6.00   sec   116 MBytes   974 Mbits/sec    0   2.39 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   6.00-7.00   sec   108 MBytes   902 Mbits/sec  680   1.71 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   7.00-8.00   sec   126 MBytes  1.06 Gbits/sec    0   1.82 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   8.00-9.00   sec   128 MBytes  1.07 Gbits/sec    0   1.90 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   9.00-10.00  sec   117 MBytes   980 Mbits/sec    0   1.93 MBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ID] Interval           Transfer     Bandwidth       Retr
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   0.00-10.00  sec  1.14 GBytes   980 Mbits/sec  846             sender
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   0.00-10.00  sec  1.14 GBytes   977 Mbits/sec                  receiver

iperf Done.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you see the transfer rate of 0 Byte, most likely there is a problem with the configured MTU of your interfaces.&lt;/p&gt;</content><author><name></name></author><category term="Networking" /><category term="Linux" /><summary type="html">By creating an overlay network, you can have a new interface attached to your system with any arbitrary IP that you would like. You can also join other machines to this network and have connectivity between all of them using the overlay IPs. OVS is a multilayer virtual switch designed to enable massive network automation through programmatic extension. To create an overlay network, we need to create an internal interface. The internal interface is used because you may lose your connectivity when trying to build a bridge and connect your physical interfaces to it; since they would not get an IP (switches work in layer 2). Instead, the internal interface obtains an IP address, and the host would be accessible. Here, we create an overlay network between three VMs running on Virtual Box.</summary></entry></feed>