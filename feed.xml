<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://etesami.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://etesami.github.io/" rel="alternate" type="text/html" /><updated>2020-01-28T22:16:18-05:00</updated><id>https://etesami.github.io/feed.xml</id><title type="html">Ehsan Etesami</title><subtitle>Ehsan Etesami Graduate PhD student Electrical and Computer Engineering University of Toronto Canada</subtitle><entry><title type="html">Run PyCharm IDE over SSH using Remote Host Interpreter</title><link href="https://etesami.github.io/2020/01/27/run-pycharm-over-ssh-remotely.html" rel="alternate" type="text/html" title="Run PyCharm IDE over SSH using Remote Host Interpreter" /><published>2020-01-27T00:00:00-05:00</published><updated>2020-01-27T00:00:00-05:00</updated><id>https://etesami.github.io/2020/01/27/run-pycharm-over-ssh-remotely</id><content type="html" xml:base="https://etesami.github.io/2020/01/27/run-pycharm-over-ssh-remotely.html">&lt;div class=&quot;row justify-content-between&quot;&gt;
	&lt;div class=&quot;col col-sm-8 mt-4 col-11&quot;&gt;
		Assume you have installed a VM on the VirtualBox. We first see how we can access the VM terminal within the host machine. Then we will see how to run our python code using PyCharm IDE, which is installed on the host while codes and the interpreter are all located on the VM. 
 &lt;/div&gt;
 &lt;div class=&quot;col col-sm-4 col-11 my-4 img&quot;&gt;
   &lt;center&gt;&lt;img style=&quot;width: 80%;&quot; alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/SSH-VM-over-NAT-PyCharm-SSH-interpreter.png&quot; /&gt;&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;h4&gt;VM Network Configuration&lt;/h4&gt;
&lt;p&gt;There are possible configurations for the VM withing VirtualBox, namely “Bridge” and “NAT” mode. &lt;strong&gt;NAT&lt;/strong&gt; is the simplest way of accessing an external network from a virtual machine. We set the network adaptor mode to &lt;strong&gt;NAT&lt;/strong&gt; and configure &lt;strong&gt;Port Forwarding&lt;/strong&gt; in order to get access to the VM from the &lt;strong&gt;host&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/vm-nat-virtualbox-ssh-01.png&quot; /&gt;
   &lt;center&gt;Fig 1: Select the VM and click on Setting&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Go to the &lt;strong&gt;Network&lt;/strong&gt; and then select &lt;strong&gt;NAT&lt;/strong&gt; in &lt;em&gt;“Attached to”&lt;/em&gt; and click on &lt;strong&gt;Port Forwarding&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/vm-nat-virtualbox-ssh-02.png&quot; /&gt;
   &lt;center&gt;Fig 2: VM Network Configuration&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the following step we forward all queries sent to the port &lt;strong&gt;2229&lt;/strong&gt; of the &lt;strong&gt;Host&lt;/strong&gt; to the port &lt;strong&gt;22&lt;/strong&gt; of the &lt;strong&gt;VM&lt;/strong&gt; which is the default port for SSH. The port number 2229 can be any arbitrary available port in the host. Add a new entry and enter the number &lt;strong&gt;2229&lt;/strong&gt; for &lt;strong&gt;Host Port&lt;/strong&gt; and number &lt;strong&gt;22&lt;/strong&gt; for the &lt;strong&gt;Guest Port&lt;/strong&gt;. Leave everything else and click on Ok.&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/vm-nat-virtualbox-ssh-03.png&quot; /&gt;
   &lt;center&gt;Fig 3: VM Network NAT Configuration&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then start the VM and you are done with VM’s network configuration!&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/vm-nat-virtualbox-ssh-04.png&quot; /&gt;
   &lt;center&gt;Fig 4: Running the VM&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;h4&gt;Connect to the VM from the Host (your computer)&lt;/h4&gt;
&lt;p&gt;Now you are able to open your terminal (if you work with windows you can try &lt;a href=&quot;https://www.putty.org&quot;&gt;putty&lt;/a&gt; and then connect to your VM. Thus, minimize the VM &lt;em&gt;(you do not have to work with the VM’s actual windows anymore!)&lt;/em&gt; and open a new terminal and enter:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ssh ubuntu@localhost &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 2229&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/vm-nat-virtualbox-ssh-05.png&quot; /&gt;
   &lt;center&gt;Fig 5: Log in to the VM withing the Host terminal&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/vm-nat-virtualbox-ssh-06.png&quot; /&gt;
   &lt;center&gt;Fig 6: You've loged in to the VM!&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then it prompts for the password, after entering the password you will log into the VM. Now you can open as many terminals as you need and as long as you have made an SSH connection (like fig. 5) then you can think of each of them as a VM terminal. Every command you enter is executed in the VM.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4&gt;Using PyCharm over SSH Connection&lt;/h4&gt;
&lt;p&gt;Now we are looking for an IDE that lets us work on files on the remote server and execute them! Thus, download and install &lt;strong&gt;&lt;a href=&quot;https://www.jetbrains.com/pycharm/download/&quot;&gt;PyCharm Professional Edition&lt;/a&gt;&lt;/strong&gt;. If you install community edition, it does not provide you with the feature we are looking for. You can use your university mail to activate the license.&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-7 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-01.png&quot; /&gt;
   &lt;center&gt;Fig 7: Download the Professional Edition&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-7 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-02.png&quot; /&gt;
   &lt;center&gt;Fig 8: Run the PyCharm&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After installation lunch the IDE and select &lt;strong&gt;Create new project&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-03.png&quot; /&gt;
   &lt;center&gt;Fig 9: Select &quot;Create new project&quot;&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Enter a new name for the project and move forward according to the image below:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-04.png&quot; /&gt;
   &lt;center&gt;Fig 10: Configure the Interpreter&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;According to the image below, enter &lt;strong&gt;localhost&lt;/strong&gt; and &lt;strong&gt;ubuntu&lt;/strong&gt; for the &lt;em&gt;Host&lt;/em&gt; and &lt;em&gt;Username&lt;/em&gt; fields, respectively. Enter the port number &lt;strong&gt;2229&lt;/strong&gt; in the &lt;em&gt;port number&lt;/em&gt; field. Then press next.&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-05.png&quot; /&gt;
   &lt;center&gt;Fig 11: Configure the interpreter&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the next step you give the path where the python binary is located. This can be the default python path in your system (you can get that using &lt;code class=&quot;highlighter-rouge&quot;&gt;whereis python&lt;/code&gt;). &lt;strong&gt;However&lt;/strong&gt;, we have to use the binaries provided within the lab. Similar to when you are using command &lt;code class=&quot;highlighter-rouge&quot;&gt;source /home/ubuntu/lab1/sourceMe&lt;/code&gt;. Therefore, enter the path according to the figure below and press finish:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;/home/ubuntu/lab1/.venv/bin/python3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-08.png&quot; /&gt;
   &lt;center&gt;Fig 12: Path for python binary&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the next step, make sure you have selected the &lt;strong&gt;Remote interpreter&lt;/strong&gt; like what you see in the picture below:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-10 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-09.png&quot; /&gt;
   &lt;center&gt;Fig 13: Select the newly added remote interpreter&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now you have created a project using VM’s python interpreter. Let’s copy files from the VM into the host in order to start editing them. Go to &lt;strong&gt;tools&lt;/strong&gt;, &lt;strong&gt;Deployment&lt;/strong&gt; and then &lt;strong&gt;Browse Remote Host&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-12 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-10.png&quot; /&gt;
   &lt;center&gt;Fig 14: Enable browsing remote host&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the newly opened window, look for &lt;strong&gt;home&lt;/strong&gt;, then &lt;strong&gt;ubuntu&lt;/strong&gt; and &lt;strong&gt;lab1&lt;/strong&gt;. Open the lab1 folder and select both folders &lt;strong&gt;track1&lt;/strong&gt; and &lt;strong&gt;track2&lt;/strong&gt; by pressing &lt;strong&gt;ctrl&lt;/strong&gt; button. Then press &lt;strong&gt;right-click&lt;/strong&gt; and select &lt;strong&gt;copy&lt;/strong&gt; according to the image below:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-8 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-11.png&quot; /&gt;
   &lt;center&gt;Fig 15: Copy folders from remote server (VM) to your machine (host)&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Go to the &lt;strong&gt;Project&lt;/strong&gt; windows in the left side of IDE and past folders inside your &lt;strong&gt;project folder&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-8 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-12.png&quot; /&gt;
   &lt;center&gt;Fig 16: Past folders from VM to your host&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So now you have lab files from the VM. Before starting to open and work on them, let’s sync your host with the VM so that the changes you are going to make are being synced with the files in the VM. Thus, click on &lt;strong&gt;folder project&lt;/strong&gt;, go to the &lt;strong&gt;Deployment&lt;/strong&gt; and select &lt;strong&gt;upload to ubuntu@localhost:2229&lt;/strong&gt;, like the image below:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-12 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-13.png&quot; /&gt;
   &lt;center&gt;Fig 17: Upload and sync files with the VM&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now you are ready to open files, edit and execute them. So let’s open folder &lt;code class=&quot;highlighter-rouge&quot;&gt;track1/module4&lt;/code&gt; and then &lt;code class=&quot;highlighter-rouge&quot;&gt;receiver.py&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sender.py&lt;/code&gt;. Then &lt;em&gt;run&lt;/em&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;receiver.py&lt;/code&gt; and then do the same for the &lt;code class=&quot;highlighter-rouge&quot;&gt;sender.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-12 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-14.png&quot; /&gt;
   &lt;center&gt;Fig 18: Open the files, edit and run them&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now you get results of the execution of each file on the bottom window and it’s like when you are running on two separate terminals inside the VM.&lt;/p&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-12 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;SSH to VM over NAT, PyCharm with SSH interpreter&quot; src=&quot;/assets/images/pycharm-over-ssh/pycharm-ssh-python-interpreter-15.png&quot; /&gt;
   &lt;center&gt;Fig 19: Reciver.py is ruuning and you can see its status on the terminal:&lt;/center&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Congratulations! You have successfully edited and executed your files on the remote VM!&lt;/p&gt;</content><author><name></name></author><summary type="html">Assume you have installed a VM on the VirtualBox. We first see how we can access the VM terminal within the host machine. Then we will see how to run our python code using PyCharm IDE, which is installed on the host while codes and the interpreter are all located on the VM.</summary></entry><entry><title type="html">Reverse SSH to Access Hosts Behind the NAT</title><link href="https://etesami.github.io/2020/01/17/reverse-ssh-linux.html" rel="alternate" type="text/html" title="Reverse SSH to Access Hosts Behind the NAT" /><published>2020-01-17T00:00:00-05:00</published><updated>2020-01-17T00:00:00-05:00</updated><id>https://etesami.github.io/2020/01/17/reverse-ssh-linux</id><content type="html" xml:base="https://etesami.github.io/2020/01/17/reverse-ssh-linux.html">&lt;p&gt;Assume you have a local machine behind NAT and there is a relay machine that has a public IP address. You want to have access to the local computer from anywhere.&lt;/p&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-7 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;VMs Overlay Network Sample&quot; src=&quot;/assets/images/ssh-reverse-nat.png&quot; /&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;h4&gt;Create SSH from Local to the Relay Machine&lt;/h4&gt;
&lt;p&gt;Log into the relay machine and then pick any arbitrary available port up. Here we use port &lt;strong&gt;10022&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# -f send to the background&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -N means there is no command to execute&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    over an established ssh connection&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -R is used for port forwarding. Any request sent to the &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    port 10022 of the relay machine will be forwarded to &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    the port 22 of the local machine.&lt;/span&gt;

ssh &lt;span class=&quot;nt&quot;&gt;-fN&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 10022:localhost:22 &amp;lt;relay-username&amp;gt;@&amp;lt;relay-ip&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then from anywhere on the Internet, first ssh to the relay computer and then within the terminal of relay machine ssh to the local machine:&lt;/p&gt;

&lt;h4&gt;Connect to the Local Machine from the Relay Machine&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ssh &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 10022 &amp;lt;local-username&amp;gt;@localhost&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><summary type="html">Assume you have a local machine behind NAT and there is a relay machine that has a public IP address. You want to have access to the local computer from anywhere.</summary></entry><entry><title type="html">VNC Server in Ubuntu 16.04 and CentOS 7</title><link href="https://etesami.github.io/2020/01/10/vnc-ubuntu-centos.html" rel="alternate" type="text/html" title="VNC Server in Ubuntu 16.04 and CentOS 7" /><published>2020-01-10T00:00:00-05:00</published><updated>2020-01-10T00:00:00-05:00</updated><id>https://etesami.github.io/2020/01/10/vnc-ubuntu-centos</id><content type="html" xml:base="https://etesami.github.io/2020/01/10/vnc-ubuntu-centos.html">&lt;p&gt;If you work with a server hosted in the cloud environment, most of the time, you may find it very useful to have graphical access to the server. Here, we see how you can install and run a popular VNC server (TightVNC) on the Ubuntu 16:04 and CentOS 7 and then connect to it. In order to access the operating system graphically, a graphical environment should be installed on the OS. The most used ones are LXDE (fig 1), Mate (fig 2), Xfce (fig 3), KDE (fig 4) and Gnome (fig 5). Running each one requires different hardware specifications.&lt;/p&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 
 &lt;div class=&quot;col col-sm-6 col-11 my-4 img&quot;&gt;
   &lt;img alt=&quot;LXDE Plasma Environment&quot; src=&quot;/assets/images/LXDE_desktop_full.png&quot; /&gt;
   &lt;span&gt;Fig 1: LXDE Plasma Environment&lt;/span&gt;
 &lt;/div&gt;
 &lt;div class=&quot;col col-sm-6 col-11 my-4 img&quot;&gt;
   &lt;img alt=&quot;XFCE Environment&quot; src=&quot;/assets/images/ubuntu-mate.png&quot; /&gt;
   &lt;span&gt;Fig 2: Mate Environment&lt;/span&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-4 col-11 my-4 img&quot;&gt;
   &lt;img alt=&quot;XFCE Environment&quot; src=&quot;/assets/images/XFCE-Desktop-standard.png&quot; /&gt;
   &lt;span&gt;Fig 3: XFCE Environment&lt;/span&gt;
 &lt;/div&gt;
 &lt;div class=&quot;col col-md-4 col-11 my-4 img&quot;&gt;
   &lt;img alt=&quot;KDE Plasma Environment&quot; src=&quot;/assets/images/KDE_Plasma_Desktop.png&quot; /&gt;
   &lt;span&gt;Fig 4: KDE Plasma Environment&lt;/span&gt;
 &lt;/div&gt;
 
 &lt;div class=&quot;col col-md-4 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;Gnome Environment&quot; src=&quot;/assets/images/GNOME.png&quot; /&gt;
   &lt;span&gt;Fig 5: Gnome Environment&lt;/span&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;If the operating system has a graphical environment you may skip the &lt;strong&gt;Install Graphical Environment&lt;/strong&gt; section. Let’s start with CentOS 7:&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;CentOS 7&lt;/h3&gt;
&lt;h4&gt;Install Graphical Environment&lt;/h4&gt;

&lt;p&gt;To install Gnome on CentOS 7:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum groupinstall &lt;span class=&quot;s2&quot;&gt;&quot;GNOME Desktop&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;Install TightVNC Server&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tightvnc.com&quot;&gt;TightVNC server&lt;/a&gt; is a popular VNC server. Install it on the CentOS by:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tigervnc-server xorg-x11-fonts-Type1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;VNC Server Configuration&lt;/h4&gt;
&lt;p&gt;The next step is to create a config file for VNC server. In CentOS, we can copy the default config file and modify it to reflects the appropriate configuration.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The number &lt;strong&gt;1&lt;/strong&gt; in &lt;strong&gt;vncserver@:1.service&lt;/strong&gt; shows the display port in VNC server. The VNC server uses ports ranging from 5901 to 5909. Copy the bellow configuration to the newly created file and replace the &lt;strong&gt;centos&lt;/strong&gt; with your username.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Remote desktop service &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;VNC&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;syslog.target network.target

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;forking
&lt;span class=&quot;nv&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/usr/bin/vncserver -kill %i &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 || :'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/sbin/runuser &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; centos &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/usr/bin/vncserver %i&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/usr/bin/vncserver -kill %i &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 || :'&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We realized a line like this “PIDFile=/home/&lt;USER&gt;/.vnc/%H%i.pid&quot; in the configuration file may cause problem in starting the service. So we have removed it. Then, reload the configuration and enable the service to start on boot:&lt;/USER&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;systemctl daemon-reload
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;vncserver@:1.service&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;Running the VNC Service&lt;/h4&gt;
&lt;p&gt;Now run the VNC server. If this is the first time then you have to provide the password for VNC server. This password will be used when you connect to the VNC sever.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;vncserver&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After running VNC server, kill the session that the previous command just created and run the service:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;vncserver &lt;span class=&quot;nt&quot;&gt;-kill&lt;/span&gt; :1
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start vncserver@:1.service&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h3&gt;Ubuntu 16:04&lt;/h3&gt;
&lt;h4&gt;Install Graphical Environment&lt;/h4&gt;

&lt;p&gt;I prefer to install the graphical environment using a tool called &lt;strong&gt;tasksel&lt;/strong&gt;. It used to install a collection of tools:&lt;/p&gt;

&lt;p&gt;To install Ubuntu Mate:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tasksel
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tasksel&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When you run the tool, you will see a user interface which let you install collections of tools, including a couple of graphical environment for Ubuntu. In this dialog let’s select &lt;strong&gt;Ubuntu Mate minimal installation&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-8 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;VMs Overlay Network Sample&quot; src=&quot;/assets/images/ubuntu-tasksel.png&quot; /&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;h4&gt;Install TightVNC Server&lt;/h4&gt;
&lt;p&gt;Install TightVNC server on the Ubuntu by:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tightvncserver&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;VNC Server Configuration&lt;/h4&gt;
&lt;p&gt;In Ubuntu we have to create a file named as &lt;strong&gt;vncserver@.service&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim /etc/systemd/system/vncserver@.service&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Put the content bellow into the file. Do not forget to replace every &lt;strong&gt;ubuntu&lt;/strong&gt; word with your account username on the machine:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Start TightVNC server at startup
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;syslog.target network.target

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;forking
&lt;span class=&quot;nv&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ubuntu
&lt;span class=&quot;nv&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ubuntu
&lt;span class=&quot;nv&quot;&gt;WorkingDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/ubuntu

&lt;span class=&quot;nv&quot;&gt;PIDFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/ubuntu/.vnc/%H:%i.pid                                                                                          
&lt;span class=&quot;nv&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-/usr/bin/vncserver &lt;span class=&quot;nt&quot;&gt;-kill&lt;/span&gt; :%i &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/bin/vncserver :%i
&lt;span class=&quot;nv&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/bin/vncserver &lt;span class=&quot;nt&quot;&gt;-kill&lt;/span&gt; :%i

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl daemon-reload
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;vncserver@1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;Running the VNC Service&lt;/h4&gt;
&lt;p&gt;Now we need to run the VNC server and If this is the first time then you have to provide the password for VNC server:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;vncserver&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After running VNC server, kill the session that the previous command just created and run the service:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;vncserver &lt;span class=&quot;nt&quot;&gt;-kill&lt;/span&gt; :1
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start vncserver@1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h4&gt;Access to the Remote Machine using VNC Client&lt;/h4&gt;
&lt;p&gt;There are a couple of VNC viewer client avaialbe. Download one of them and connect to server:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;vnc://IP_address:5901&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h4&gt;Troubleshooting&lt;/h4&gt;
&lt;p&gt;When you try to install a graphical environment and start the VNC server, it is pretty common to encounter errors and gray screen. Here is a list of resources which may be useful:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/42296329/&quot;&gt;The gray screen in VNC viewer when using Gnome in Ubuntu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.howopensource.com/2011/08/vnc-error-unable-to-connect-to-host-no-route-to-host-113-solved/&quot;&gt;“Unable to connect to host: No route to host” Allow traffic to pass through Iptables in CentOS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://askubuntu.com/questions/943750&quot;&gt;Differrent graphical environments for Linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linuxtechi.com/install-configure-vnc-server-centos-7-rhel-7/&quot;&gt;A Good article to install VNC server from begging to the end on CentOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">If you work with a server hosted in the cloud environment, most of the time, you may find it very useful to have graphical access to the server. Here, we see how you can install and run a popular VNC server (TightVNC) on the Ubuntu 16:04 and CentOS 7 and then connect to it. In order to access the operating system graphically, a graphical environment should be installed on the OS. The most used ones are LXDE (fig 1), Mate (fig 2), Xfce (fig 3), KDE (fig 4) and Gnome (fig 5). Running each one requires different hardware specifications.</summary></entry><entry><title type="html">Create an Overlay Network in Ubuntu using Open vSwitch (OVS)</title><link href="https://etesami.github.io/2019/10/14/overlay-networks-in-ubuntu.html" rel="alternate" type="text/html" title="Create an Overlay Network in Ubuntu using Open vSwitch (OVS)" /><published>2019-10-14T00:00:00-04:00</published><updated>2019-10-14T00:00:00-04:00</updated><id>https://etesami.github.io/2019/10/14/overlay-networks-in-ubuntu</id><content type="html" xml:base="https://etesami.github.io/2019/10/14/overlay-networks-in-ubuntu.html">&lt;p&gt;By creating an overlay network, you can have a new interface attached to your system with any arbitrary IP that you would like. You can also join other machines to this network and have connectivity between all of them using the overlay IPs.
OVS is a multilayer virtual switch designed to enable massive network automation through programmatic extension. To create an overlay network, we need to create an &lt;strong&gt;internal interface&lt;/strong&gt;. The internal interface is used because you may lose your connectivity when trying to build a bridge and connect your physical interfaces to it; since they would not get an IP (switches work in &lt;strong&gt;layer 2&lt;/strong&gt;). Instead, the internal interface obtains an IP address, and the host would be accessible. Here, we create an overlay network between three VMs running on Virtual Box.&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;h4&gt;Install Open vSwitch&lt;/h4&gt;
&lt;p&gt;To install Open vSwitch please check &lt;a href=&quot;http://docs.openvswitch.org/en/latest/&quot;&gt;their page&lt;/a&gt;. Alternatively, you can install ovs using apt-get in ubuntu by:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;openvswitch-switch openvswitch-common&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In an overlay network created by Openvswitch, all packets are encapsulated in UDP packets associated with the port 4789. So please ensure this port is accessible.&lt;/p&gt;

&lt;h4&gt;Create a bridge and interfaces&lt;/h4&gt;

&lt;div class=&quot;row justify-content-center&quot;&gt;
 &lt;div class=&quot;col col-sm-7 col-11 align-self-center my-4 img&quot;&gt;
   &lt;img alt=&quot;VMs Overlay Network Sample&quot; src=&quot;/assets/images/vms-overlay-network-sample.png&quot; /&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Here, we create a bridge named &lt;strong&gt;br-mng&lt;/strong&gt;. An internal interface named &lt;strong&gt;intif&lt;/strong&gt; and an interface of type &lt;strong&gt;vxlan&lt;/strong&gt; are also created. Vxlan interface is used for point to point communication between two hosts. So the same key should be used for both hosts on each side of the connection. It should be noted that the MTU of the internal interface (intif) should be set to &lt;strong&gt;1450&lt;/strong&gt;. Since packets are encapsulated in UDP packets and the size of the payload is matter. There is a nice explanation &lt;a href=&quot;https://www.sidorenko.io/post/2018/11/openstack-networking-open-vswitch-and-vxlan-introduction&quot;&gt;here&lt;/a&gt;. Then we have:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-br br-mng
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-port br-mng intif &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interface intif &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;internal
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-port br-mng vxlan1 &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interface vxlan1 &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vxlan &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                   options:remote_ip&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10.0.0.12 options:key&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1025
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ifconfig intif 192.168.10.11/24 mtu 1450 up&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And in VM #2 we have the same things. However, the underlay and overlay IP are changed correspondingly, but the key remains the same.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-br br-mng
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-port br-mng intif &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interface intif &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;internal
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl add-port br-mng vxlan1 &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;interface vxlan1 &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vxlan &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                   options:remote_ip&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10.0.0.11 options:key&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1025
ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ifconfig intif 192.168.10.12/24 mtu 1450 up&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;Test the Connectivity&lt;/h4&gt;
&lt;p&gt;To ensure having proper connectivity, let’s see the status of interfaces of your VMs. We should have the &lt;strong&gt;overlay IP&lt;/strong&gt; that we chose before and &lt;strong&gt;MTU of 1450&lt;/strong&gt; for &lt;strong&gt;intif&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ifconfig
eth0: &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
  inet 10.0.0.11 netmask 255.255.255.0  broadcast 10.0.0.255
  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
intif: &lt;span class=&quot;nv&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1450
  inet 192.168.10.11 netmask 255.255.255.0  broadcast 192.168.10.255
  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
  .&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also use &lt;a href=&quot;https://iperf.fr&quot;&gt;iperf3&lt;/a&gt; which is a tool for active measurements of the maximum achievable bandwidth. 
On VM #1 with overlay IP of 192.168.10.11 execute:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;iperf3 &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and on the VM #2 with overlay IP of 192.168.10.12:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM1:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;iperf3 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 192.168.10.11&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then you should see the following output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;ubuntu@VM2:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;iperf3 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 192.168.10.11
Connecting to host 192.168.10.11, port 5201
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4] &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;192.168.10.12 port 33092 connected to 192.168.10.11 port 5201
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ID] Interval           Transfer     Bandwidth       Retr  Cwnd
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   0.00-1.00   sec   102 MBytes   858 Mbits/sec    0   2.09 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   1.00-2.00   sec   118 MBytes   992 Mbits/sec    0   2.33 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   2.00-3.00   sec   121 MBytes  1.01 Gbits/sec    0   2.78 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   3.00-4.00   sec   119 MBytes   996 Mbits/sec  166   1.97 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   4.00-5.00   sec   114 MBytes   957 Mbits/sec    0   1.97 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   5.00-6.00   sec   116 MBytes   974 Mbits/sec    0   2.39 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   6.00-7.00   sec   108 MBytes   902 Mbits/sec  680   1.71 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   7.00-8.00   sec   126 MBytes  1.06 Gbits/sec    0   1.82 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   8.00-9.00   sec   128 MBytes  1.07 Gbits/sec    0   1.90 MBytes       
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   9.00-10.00  sec   117 MBytes   980 Mbits/sec    0   1.93 MBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ID] Interval           Transfer     Bandwidth       Retr
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   0.00-10.00  sec  1.14 GBytes   980 Mbits/sec  846             sender
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  4]   0.00-10.00  sec  1.14 GBytes   977 Mbits/sec                  receiver

iperf Done.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you see the transfer rate of 0 Byte, most likely there is a problem with the configured MTU of your interfaces.&lt;/p&gt;</content><author><name></name></author><summary type="html">By creating an overlay network, you can have a new interface attached to your system with any arbitrary IP that you would like. You can also join other machines to this network and have connectivity between all of them using the overlay IPs. OVS is a multilayer virtual switch designed to enable massive network automation through programmatic extension. To create an overlay network, we need to create an internal interface. The internal interface is used because you may lose your connectivity when trying to build a bridge and connect your physical interfaces to it; since they would not get an IP (switches work in layer 2). Instead, the internal interface obtains an IP address, and the host would be accessible. Here, we create an overlay network between three VMs running on Virtual Box.</summary></entry></feed>